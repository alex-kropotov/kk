<?php

declare(strict_types=1);

use Tools\CommandBus\AsCommandHandler;

require_once  'vendor/autoload.php';

//$handlersDir = 'back/Domain/Handlers';
$handlersDir = 'back/Feature';
$outputFile = 'config/command-map.php';

$rii = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($handlersDir));
$map = [];

foreach ($rii as $file) {
    if (!$file->isFile() || $file->getExtension() !== 'php') {
        continue;
    }

    $fullPath = $file->getRealPath();
    require_once $fullPath;

    $content = file_get_contents($fullPath);
    if (!preg_match('/namespace\s+(.+?);/', $content, $nsMatch)) {
        continue;
    }
    if (!preg_match('/class\s+(\w+)/', $content, $classMatch)) {
        continue;
    }

    $fqcn = $nsMatch[1] . '\\' . $classMatch[1];

    if (!class_exists($fqcn)) {
        continue;
    }

    $refl = new ReflectionClass($fqcn);
    $attrs = $refl->getAttributes(AsCommandHandler::class);

    if (count($attrs) === 0) {
        continue;
    }

    /** @var AsCommandHandler $attr */
    $attr = $attrs[0]->newInstance();

    if (isset($map[$attr->commandClass])) {
        throw new RuntimeException("Duplicate handler for command {$attr->commandClass}: 
            {$map[$attr->commandClass]} and {$fqcn}");
    }

    $map[$attr->commandClass] = $fqcn;
}

ksort($map);

$output = <<<PHP
<?php

/**
 * This file is auto-generated by generate-command-map.php.
 * Do not edit manually.
 */

declare(strict_types=1);

return [
PHP;

foreach ($map as $command => $handler) {
    $output .= "\n    \\$command::class => \\$handler::class,";
}
$output .= "\n];\n";

file_put_contents($outputFile, $output);

echo "âœ… Command map generated to: $outputFile\n";
